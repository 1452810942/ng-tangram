import { EventEmitter, ElementRef, Renderer2 } from '@angular/core';
import { CdkConnectedOverlay, ConnectedOverlayPositionChange, ConnectionPositionPair, OverlayOrigin } from '@angular/cdk/overlay';
import { NtOverlayPosition } from './overlay-positions';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/do';
import 'rxjs/add/operator/debounceTime';
import 'rxjs/add/operator/filter';
export declare type NtOverlayTriggerType = '' | 'hover' | 'click';
export declare class NtOverlayComponent {
    private _renderer;
    private _elementRef;
    private _isOpen;
    private _isMouseIn;
    private _origin;
    private _position;
    private _positionPairs;
    private _paddingClass;
    private _arrow;
    private _noSpacing;
    private _trigger;
    private _overlayClass;
    private _fixed;
    private _closeEvent;
    private _positionChange;
    readonly isOpen: boolean;
    readonly isMouseIn: boolean;
    origin: OverlayOrigin;
    position: NtOverlayPosition;
    readonly positions: ConnectionPositionPair[];
    readonly paddingClass: string;
    fixed: boolean;
    arrow: boolean;
    noSpacing: boolean;
    trigger: NtOverlayTriggerType;
    overlayClass: string;
    cdkConnectedOverlay: CdkConnectedOverlay;
    opened: EventEmitter<any>;
    closed: EventEmitter<any>;
    positionChange: EventEmitter<ConnectedOverlayPositionChange>;
    constructor(_renderer: Renderer2, _elementRef: ElementRef);
    private _setPosition();
    private getPosition(value);
    show(): void;
    hide(): void;
    click(): void;
    onOverlayPositionChange(event: ConnectedOverlayPositionChange): void;
    onMouseEnter(): void;
    onMouseLeave(): void;
}
