{"version":3,"file":"forms.umd.min.js","sources":["../../../../out-tsc/@ng-tangram/components/forms/form-field-control.ts","../../../../out-tsc/@ng-tangram/components/forms/form-field.component.ts","../../../../out-tsc/@ng-tangram/components/forms/form-autofocus.directive.ts","../../../../out-tsc/@ng-tangram/components/forms/form-validation.ts","../../../../out-tsc/@ng-tangram/components/forms/form-error.pipe.ts","../../../../out-tsc/@ng-tangram/components/forms/forms.module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { Observable } from 'rxjs/Observable';\nimport { NgControl } from '@angular/forms';\n\n/** An interface which allows a control to work inside of a `NtFormField`. */\nexport abstract class NtFormFieldControl<T> {\n\n  /** The value of the control. */\n  value: T | null;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /**  */\n  focus(): void { }\n}\n","import { transition, trigger } from '@angular/animations';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild,\n  ContentChildren, ElementRef, Input, NgZone, OnChanges, OnDestroy, OnInit, Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { fadeIn, fadeOut } from '@ng-tangram/animate/fading';\n\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport { Observable } from 'rxjs/Observable';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/observable/merge';\nimport { filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\n\nimport { NtFormFieldControl } from './form-field-control';\n\nexport declare type NtFormFieldOrientation = 'vertical' | 'horizontal';\n\n@Component({\n  selector: 'nt-form-field',\n  template: `\n    <label class=\"nt-form-label\" [class.required]=\"required\" *ngIf=\"labelVisible\">{{label}}</label>\n    <div class=\"nt-form-group\">\n      <div class=\"nt-form-control\">\n        <ng-content></ng-content>\n      </div>\n      <span class=\"form-error is-visible\" *ngIf=\"_invalid\" [@fade]=\"_invalid\">\n        {{ (errors || {}) | ntFormError :label }}\n      </span>\n    </div>\n  `,\n  animations: [\n    trigger('fade', [\n      transition('* => false', fadeOut(.15)),\n      transition('* => true', fadeIn(.15))\n    ])\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'nt-form-field',\n    '[class.nt-form-error]': '_invalid',\n    '[class.nt-form-horizontal]': 'horizontal'\n  }\n})\nexport class NtFormFieldComponent implements AfterViewInit, OnDestroy {\n\n  /** 表单可见性 */\n  private _labelVisible = true;\n\n  private readonly _destroy = new Subject<void>();\n\n  _invalid = false;\n\n  @Input() label: string;\n\n  @Input()\n  set labelVisible(value: boolean) { this._labelVisible = coerceBooleanProperty(value); }\n  get labelVisible() { return this._labelVisible; }\n\n  get horizontal() { return this.orientation === 'horizontal'; }\n\n  get required() {\n\n    if (this.ngControl &&\n      this.ngControl.control &&\n      this.ngControl.control.validator) {\n      const control = new FormControl();\n      const validateResult = this.ngControl.control.validator(control);\n      return validateResult && validateResult.hasOwnProperty('required');\n    }\n\n    if (this.control) {\n      return !!this.control.required;\n    }\n\n    return false;\n  }\n\n  get errors() { return this.control.ngControl ? this.control.ngControl.errors : null; }\n\n  @Input() orientation: NtFormFieldOrientation;\n\n  /** 表单正确时的样式 */\n  // @Input() validClass: string;\n\n  /** 表单错误时的样式 */\n  // @Input() invalidClass: string;\n\n  /** 表单模型 */\n  @ContentChild(NtFormFieldControl) control: NtFormFieldControl<any>;\n\n  get ngSubmit(): Observable<any> | null {\n    if (this._parentForm || this._parentFormGroup) {\n      return (this._parentForm || this._parentFormGroup || <any>{}).ngSubmit;\n    }\n    return null;\n  }\n\n  get ngControl(): NgControl | null { return this.control ? this.control.ngControl : null; }\n\n  readonly statusChanges: Observable<any> = defer(() => {\n    if (this.control && this.ngControl) {\n      return this.ngControl.statusChanges ? this.ngControl.statusChanges : Observable.of(null);\n    }\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.statusChanges));\n  });\n\n  constructor(\n    private _ngZone: NgZone,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _parentForm: NgForm,\n    @Optional() private _parentFormGroup: FormGroupDirective) {\n    this.statusChanges.pipe(takeUntil(this._destroy)).subscribe(() => this._validate());\n  }\n\n  ngAfterViewInit() {\n    if (this.ngSubmit && this.ngControl) {\n      this.ngSubmit.pipe(takeUntil(this._destroy)).subscribe(() => this._validate());\n    }\n  }\n\n  private _validate() {\n    if (this.ngControl) {\n      this._invalid = !!this.ngControl.invalid;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n  }\n}\n","import {\n  AfterContentInit, ContentChildren, Directive, Input, OnChanges, QueryList, Optional\n} from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup, FormGroupName, NgForm, FormGroupDirective, ControlContainer } from '@angular/forms';\nimport { Observable } from 'rxjs/Observable';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/operators/merge';\n\nimport { NtFormFieldControl } from './form-field-control';\nimport { NtFormFieldComponent } from './form-field.component';\n\n@Directive({\n  selector: 'form[ntFormAutofocus]',\n  host: {\n    '(submit)': 'onSubmit($event)'\n  }\n})\nexport class NtFormAutofocusDirective {\n\n  _form: ControlContainer;\n\n  @ContentChildren(NtFormFieldComponent) fields: QueryList<NtFormFieldComponent>;\n\n  constructor(@Optional() form: NgForm, @Optional() formGroup: FormGroupDirective) {\n    this._form = form || formGroup;\n  }\n\n  onSubmit() {\n    if (this._form.invalid) {\n      const field = this.fields.find(field => !!field.ngControl && !!field.ngControl.invalid);\n      if (field && field.control) {\n        field.control.focus();\n      }\n    }\n  }\n}\n","import { Injectable, InjectionToken } from '@angular/core';\nimport { ValidationErrors } from '@angular/forms';\n\nexport const DEFAULT_TEMPLATES = {\n  \"required\": \"请填写{0}\",\n  \"email\": \"{0}不是邮箱格式\",\n  \"min\": \"{0}必须输入大于{1}的数字\",\n  \"max\": \"{0}必须输入小于{1}的数字\",\n  \"pattern\": \"{0}不是合法的数据\",\n  \"maxlength\": \"{0}长度为最大{1}\",\n  \"minlength\": \"{0}长度为最小{1}\"\n};\n\n// export class NtValidationTemplate {\n//   required = '请填写{0}';\n//   email = '{0}不是邮箱格式';\n//   min = '{0}必须输入大于{1}的数字';\n//   max = '{0}必须输入小于{1}的数字';\n//   pattern = '{0}不是合法的数据';\n//   maxlength = '{0}长度为最大{1}';\n//   minlength = '{0}长度为最小{1}';\n// }\n\nexport interface NtValidationTransformer {\n  transform(errors?: ValidationErrors, label?: string): string | null;\n}\n\n@Injectable()\nexport class NtFormValidationTransformer implements NtValidationTransformer {\n\n  transform(errors?: ValidationErrors, label?: string) {\n    if (!errors) {\n      return '';\n    }\n\n    if (errors.hasOwnProperty('required')) {\n      return this._format(DEFAULT_TEMPLATES['required'], label);\n    } else if (errors.hasOwnProperty('email')) {\n      return this._format(DEFAULT_TEMPLATES['email'], label);\n    } else if (errors.hasOwnProperty('min')) {\n      return this._format(DEFAULT_TEMPLATES['min'], label, errors.min.min);\n    } else if (errors.hasOwnProperty('max')) {\n      return this._format(DEFAULT_TEMPLATES['max'], label, errors.max.max);\n    } else if (errors.hasOwnProperty('minlength')) {\n      return this._format(DEFAULT_TEMPLATES['minlength'], label, errors.minlength.requiredLength);\n    } else if (errors.hasOwnProperty('maxlength')) {\n      return this._format(DEFAULT_TEMPLATES['maxlength'], label, errors.maxlength.requiredLength);\n    } else if (errors.hasOwnProperty('pattern')) {\n      return this._format(DEFAULT_TEMPLATES['pattern'], label);\n    } else {\n      return '';\n    }\n  }\n\n  protected _format(template: string, ...args: any[]) {\n    return template.replace(/\\{(\\d+)\\}/g, function (match: any, number: number) {\n      return typeof args[number] !== 'undefined' ? args[number] : match;\n    });\n  }\n}\n\n// export const NT_VALIDATION_TEMPLATE = new InjectionToken<NtValidationTemplate>('nt-validation-template');\n\nexport const NT_VALIDATION_TRANSFOMER = new InjectionToken<NtValidationTransformer>('nt-validation-transformer');\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\nimport { ValidationErrors } from '@angular/forms';\nimport { NT_VALIDATION_TRANSFOMER, NtValidationTransformer } from './form-validation';\n\n@Pipe({ name: 'ntFormError' })\nexport class NtFormErrorPipe implements PipeTransform {\n  constructor(@Inject(NT_VALIDATION_TRANSFOMER) private _transformer: NtValidationTransformer) { }\n\n  transform(value: ValidationErrors, ...args: any[]) {\n    return this._transformer.transform(value, args[0]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NtFormAutofocusDirective } from './form-autofocus.directive';\nimport { NtFormErrorPipe } from './form-error.pipe';\nimport { NtFormFieldComponent } from './form-field.component';\nimport { NtFormValidationTransformer, NT_VALIDATION_TRANSFOMER } from './form-validation';\nimport { NtValidationTransformer } from './form-validation';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [NtFormFieldComponent, NtFormAutofocusDirective, NtFormErrorPipe],\n  declarations: [NtFormFieldComponent, NtFormAutofocusDirective, NtFormErrorPipe],\n})\nexport class NtFormsModule {\n  public static forRoot(transformer?: Type<NtValidationTransformer>): ModuleWithProviders {\n    return {\n      ngModule: NtFormsModule,\n      providers: [\n        { provide: NT_VALIDATION_TRANSFOMER, useClass: transformer || NtFormValidationTransformer }\n      ]\n    };\n  }\n}\n"],"names":["NtFormFieldControl","_ngZone","_changeDetectorRef","_parentForm","_parentFormGroup","this","Subject","defer","_this","control","ngControl","statusChanges","Observable","of","onStable","asObservable","pipe","take","switchMap","takeUntil","_destroy","subscribe","_validate","NtFormFieldComponent","_labelVisible","value","coerceBooleanProperty","Object","orientation","validator","FormControl","validateResult","hasOwnProperty","required","errors","ngSubmit","_invalid","invalid","markForCheck","next","complete","Component","selector","template","animations","trigger","transition","fadeOut","fadeIn","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.nt-form-error]","[class.nt-form-horizontal]","NgZone","ChangeDetectorRef","NgForm","Optional","FormGroupDirective","Input","ContentChild","form","formGroup","_form","NtFormAutofocusDirective","field","fields","find","focus","Directive","(submit)","ContentChildren","DEFAULT_TEMPLATES","email","min","max","pattern","maxlength","minlength","NtFormValidationTransformer","label","_format","requiredLength","_i","args","replace","match","number","Injectable","NT_VALIDATION_TRANSFOMER","InjectionToken","_transformer","NtFormErrorPipe","transform","Pipe","name","Inject","NtFormsModule","transformer","ngModule","providers","provide","useClass","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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"}