{"version":3,"file":"table.umd.js","sources":["../../../../out-tsc/@ng-tangram/components/table/column.ts","../../../../out-tsc/@ng-tangram/components/table/column.directive.ts","../../../../out-tsc/@ng-tangram/components/table/table.component.ts","../../../../out-tsc/@ng-tangram/components/table/table.module.ts"],"sourcesContent":["import { InjectionToken, EventEmitter } from '@angular/core';\n\nexport class NtColumnSortChange {\n  constructor(public isUserInput = false, public column: string, public sort: string) {}\n}\n\nexport interface NtColumn {\n  sort: '' | 'asc' | 'desc';\n  sortable: boolean;\n  sorting: (isUserInput: boolean) => void;\n  sortChange: EventEmitter<NtColumnSortChange>;\n  visibled: boolean;\n}\n\nexport interface NtColumnTable {\n\n}\n\nexport const NT_COLUMN = new InjectionToken<NtColumn>('nt-column');\n\nexport const NT_COLUMN_TABLE = new InjectionToken<NtColumnTable>('nt-column-table');\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterContentInit, Component, ContentChild, Directive, ElementRef, EventEmitter, Inject, Input,\n  Optional, Output, TemplateRef, ViewChild, ViewContainerRef\n} from '@angular/core';\nimport { NT_COLUMN, NT_COLUMN_TABLE, NtColumn, NtColumnSortChange, NtColumnTable } from './column';\n\n@Directive({\n  selector: 'nt-column-header',\n  host: {\n    'class': 'nt-column-header',\n    '[class.nt-column-sortable]': 'column.sortable',\n    '[class.asc]': 'column.sort === \"asc\"',\n    '[class.desc]': 'column.sort === \"desc\"',\n    '(click)': 'column.sorting(true)'\n  }\n})\nexport class NtColumnHeaderDirective {\n  constructor(\n    public elementRef: ElementRef,\n    @Optional() @Inject(NT_COLUMN) public column: NtColumn) { }\n}\n\n@Directive({\n  selector: 'nt-column-cell',\n  host: {\n    'class': 'nt-column-cell'\n  }\n})\nexport class NtColumnCellDirective { }\n\n@Directive({ selector: '[ntColumnCellDef]' })\nexport class NtColumnCellDefDirective {\n  constructor(public template: TemplateRef<any>) { }\n}\n\n@Component({\n  selector: 'nt-column',\n  template: `\n    <ng-template>\n      <ng-content select=\"nt-column-header\"></ng-content>\n    </ng-template>\n  `,\n  providers: [\n    { provide: NT_COLUMN, useExisting: NtColumnComponent }\n  ]\n})\nexport class NtColumnComponent implements NtColumn, AfterContentInit {\n\n  private _sortable = false;\n\n  sort: '' | 'asc' | 'desc' = '';\n\n  visibled = true;\n\n  @Input()\n  set sortable(value: boolean) { this._sortable = coerceBooleanProperty(value); }\n  get sortable() { return this._sortable; }\n\n  get text () {\n    return this.header && this.header.elementRef.nativeElement.textContent;\n  }\n\n  @Input() name: string;\n\n  @Input() width: number | string = 'auto';\n\n  @Input() align: 'left' | 'center' | 'right' = 'left';\n\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  @ContentChild(NtColumnHeaderDirective) header: NtColumnHeaderDirective;\n\n  @ContentChild(NtColumnCellDefDirective) cell: NtColumnCellDefDirective;\n\n  readonly sortChange: EventEmitter<NtColumnSortChange> = new EventEmitter<NtColumnSortChange>();\n\n  constructor(\n    @Optional() @Inject(NT_COLUMN_TABLE) private _table: NtColumnTable,\n    private _viewContainerRef: ViewContainerRef,\n    private _elementRef: ElementRef) { }\n\n  /** 排序操作 */\n  sorting(isUserInput = false) {\n    if (this.sortable) {\n\n      /** 按照 升 -> 降 -> 无 的循环改变排序 */\n      if (this.sort === 'asc') {\n        this.sort = 'desc';\n      } else if (this.sort === 'desc') {\n        this.sort = '';\n      } else {\n        this.sort = 'asc';\n      }\n\n      /** 用户操作的操作才会触发事件 */\n      this.sortChange.emit(new NtColumnSortChange(isUserInput, this.name, this.sort));\n    }\n  }\n\n  ngAfterContentInit() {\n\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n  AfterContentInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild,\n  ContentChildren, ElementRef, EventEmitter, Input, NgZone, OnChanges, OnDestroy, OnInit, Output,\n  QueryList, SimpleChanges, TemplateRef, ViewChild, ViewChildren, ViewEncapsulation\n} from '@angular/core';\nimport { fadeIn } from '@ng-tangram/animate/fading';\n\nimport { Observable } from 'rxjs/Observable';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/observable/merge';\nimport { filter, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\n\nimport { NT_COLUMN_TABLE, NtColumn, NtColumnSortChange, NtColumnTable } from './column';\nimport { NtColumnComponent, NtColumnHeaderDirective } from './column.directive';\n\n@Component({\n  selector: 'nt-table',\n  template: \"<table [class]=\\\"class\\\"> <thead> <tr> <th class=\\\"nt-selector-header\\\" *ngIf=\\\"selectable\\\"> <input type=\\\"checkbox\\\" (click)=\\\"selectAll()\\\" [checked]=\\\"isAllSelected\\\"> </th> <th class=\\\"nt-column-h\\\" *ngFor=\\\"let column of columns\\\" [style.width]=\\\"column.width\\\" [style.textAlign]=\\\"column.align\\\" [class.hidden]=\\\"!column.visibled\\\"> <ng-container *ngTemplateOutlet=\\\"column.template\\\"></ng-container> </th> </tr> </thead> <tbody> <tr *ngFor=\\\"let data of dataSource\\\"> <ng-container *ngTemplateOutlet=\\\"dataRow; context: {$implicit: data};\\\"></ng-container> </tr> </tbody> </table> <ng-template #dataRow let-data> <td class=\\\"nt-selector-cell\\\" *ngIf=\\\"selectable\\\"> <input type=\\\"checkbox\\\" (click)=\\\"select(data)\\\" [checked]=\\\"checkSelected(data)\\\"> </td> <td *ngFor=\\\"let column of columns\\\" [style.textAlign]=\\\"column.align\\\" [class.hidden]=\\\"!column.visibled\\\"> <ng-container *ngTemplateOutlet=\\\"column.cell.template; context: {$implicit: data};\\\"></ng-container> </td> </ng-template> \",\n  encapsulation: ViewEncapsulation.None,\n  // changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    { provide: NT_COLUMN_TABLE, useExisting: NtTableComponent }\n  ],\n  host: {\n    'class': 'nt-table'\n  }\n})\nexport class NtTableComponent<T> implements NtColumnTable, AfterContentInit, OnChanges, OnDestroy {\n\n  columnComponent = NtColumnComponent;\n\n  @Input() class: string;\n\n  private _selectionModel: SelectionModel<T> = new SelectionModel(true, undefined, false);\n\n  private _multipleSortable = false;\n\n  private _selectable = false;\n\n  private readonly _destroy = new Subject<void>();\n\n  @ContentChildren(NtColumnComponent)\n  private _columns: QueryList<NtColumnComponent>;\n\n  get columns() { return this._columns ? this._columns.toArray() : []; }\n\n  @Input() dataSource: Array<T>;\n\n  @Input()\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n  get selectable() { return this._selectable; }\n\n  @Output() readonly selectedChange: EventEmitter<T | T[]> = new EventEmitter();\n\n  @Output() readonly sortChange: EventEmitter<NtColumnSortChange | NtColumnSortChange[]> = new EventEmitter();\n\n  readonly columSortChanges: Observable<NtColumnSortChange> = defer(() => {\n    if (this._columns) {\n      return merge(...this._columns.map(column => column.sortChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.columSortChanges));\n  });\n\n  get isAllSelected() { return this._selectionModel.selected.length === this.dataSource.length; }\n\n  get selected() { return this._selectionModel.selected; }\n\n  constructor(\n    private _ngZone: NgZone,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _element: ElementRef) { }\n\n  ngOnChanges(change: SimpleChanges) {\n    if (change && change.dataSource && !change.dataSource.firstChange) {\n      this._selectionModel.clear();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._columns.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  selectAll() {\n    if (!this.isAllSelected) {\n      this._selectionModel.select(...this.dataSource);\n    } else {\n      this._selectionModel.clear();\n    }\n    this.selectedChange.emit(this._selectionModel.selected);\n  }\n\n  select(item: T) {\n    const wasSelected = this.checkSelected(item);\n    if (wasSelected) {\n      this._selectionModel.deselect(item);\n    } else {\n      this._selectionModel.select(item);\n    }\n\n    this.selectedChange.emit(this._selectionModel.selected);\n  }\n\n  checkSelected(item: T) {\n    return this._selectionModel.isSelected(item);\n  }\n\n  private _clearSort(filter?: NtColumnSortChange) {\n    this._columns\n      .filter(column => column.name !== (filter ? filter.column : ''))\n      .forEach(column => column.sort = '');\n  }\n\n  private _resetOptions() {\n    const changedOrDestroyed = merge(this._columns.changes, this._destroy);\n\n    this.columSortChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        if (!this._multipleSortable) {\n          this._clearSort(event);\n        }\n        this.sortChange.emit(event);\n      });\n\n    merge(...this._columns.map(option => option.sortChange))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n  }\n\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NtOverlayModule } from '@ng-tangram/components/core';\n\nimport {\n  NtColumnCellDefDirective, NtColumnCellDirective, NtColumnComponent,\n  NtColumnHeaderDirective\n} from './column.directive';\nimport { NtTableComponent } from './table.component';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [\n    CommonModule,\n    NtTableComponent,\n    NtColumnComponent,\n    NtColumnCellDirective,\n    NtColumnHeaderDirective,\n    NtColumnCellDefDirective\n  ],\n  declarations: [\n    NtTableComponent,\n    NtColumnComponent,\n    NtColumnCellDirective,\n    NtColumnHeaderDirective,\n    NtColumnCellDefDirective\n  ]\n})\nexport class NtTableModule { }\n"],"names":["InjectionToken","Directive","ElementRef","Optional","Inject","TemplateRef","EventEmitter","coerceBooleanProperty","Component","ViewContainerRef","Input","ViewChild","ContentChild","SelectionModel","Subject","defer","merge","take","switchMap","startWith","takeUntil","filter","ViewEncapsulation","NgZone","ChangeDetectorRef","ContentChildren","Output","NgModule","CommonModule"],"mappings":"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"}