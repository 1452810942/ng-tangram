{"version":3,"file":"datepicker.umd.min.js","sources":["../../../../out-tsc/@ng-tangram/components/datepicker/datepicker-errors.ts","../../../../out-tsc/@ng-tangram/components/datepicker/datepicker-models.ts","../../../../out-tsc/@ng-tangram/components/datepicker/month.component.ts","../../../../out-tsc/@ng-tangram/components/datepicker/multi-year.component.ts","../../../../out-tsc/@ng-tangram/components/datepicker/year.component.ts","../../../../out-tsc/@ng-tangram/components/datepicker/calendar.component.ts","../../../../node_modules/tslib/tslib.es6.js","../../../../out-tsc/@ng-tangram/components/datepicker/datepicker.component.ts","../../../../out-tsc/@ng-tangram/components/datepicker/datepicker.module.ts"],"sourcesContent":["\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `NtDatepickerComponent: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: NtNativeDateModule or provide a ` +\n      `custom implementation.`);\n}\n","export class NtDatePickerCell {\n  constructor(\n    public value: number,\n    public displayValue: string,\n    public enabled: boolean) { }\n}\n","import {\n  AfterContentInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject,\n  Input, Optional, Output, ViewChild, ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter, NT_DATE_FORMATS, NtDateFormats } from '@ng-tangram/components/core';\n\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { NtDatePickerCell } from './datepicker-models';\n\nconst DAYS_PER_WEEK = 7;\n\nconst DAYS_MAX_ROWS = 6;\n\n@Component({\n  selector: 'nt-datepicker-month',\n  template: \"<table> <thead> <tr> <th *ngFor=\\\"let week of _weekdays\\\">{{week.narrow}}</th> </tr> </thead> <tbody> <tr *ngFor=\\\"let _rows of _weeks\\\"> <td *ngFor=\\\"let week of _rows\\\" [class.disabled]=\\\"!week.enabled\\\" [class.selected]=\\\"week.value === _selectedDate && week.enabled\\\" [class.active]=\\\"_todayDate === week.value && week.enabled\\\"> <span (click)=\\\"_dateSelected(week)\\\">{{ week.displayValue }}</span> </td> </tr> </tbody> </table> \",\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'nt-datepicker-month'\n  }\n})\nexport class NtDatePickerMonthComponent<D> implements AfterContentInit {\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: NtDatePickerCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: { long: string, narrow: string }[];\n\n  private _activeDate: D;\n  private _selected: D | null;\n  private _minDate: D | null;\n  private _maxDate: D | null;\n\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(NT_DATE_FORMATS) private _dateFormats: NtDateFormats) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('NT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return { long, narrow: narrowWeekdays[i] };\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(cell: NtDatePickerCell) {\n    if (cell.enabled && this._selectedDate !== cell.value) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, cell.value);\n      this.selectedChange.emit(selectedDate);\n    }\n  }\n\n  _init() {\n\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel = this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n      .toLocaleUpperCase();\n\n    const firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n      this._dateAdapter.getMonth(this.activeDate), 1);\n\n    this._firstWeekOffset = (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n      this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n\n    this._weeks = [[]];\n\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++ , cell++) {\n      if (cell === DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      this._weeks[this._weeks.length - 1].push(new NtDatePickerCell(i + 1, dateNames[i], enabled));\n    }\n\n    this._fillBeforeCells();\n    this._fillAfterCells();\n  }\n\n  private _getWeekOffset() {\n    const firstDayForCurrentMonth = this._dateAdapter.createDate(\n      this._dateAdapter.getYear(this.activeDate),\n      this._dateAdapter.getMonth(this.activeDate), 1);\n\n    const firstDayForWeek = this._dateAdapter.getDayOfWeek(firstDayForCurrentMonth);\n\n    return firstDayForWeek - this._dateAdapter.getFirstDayOfWeek() >= 0\n      ? firstDayForWeek - this._dateAdapter.getFirstDayOfWeek()\n      : firstDayForWeek - this._dateAdapter.getFirstDayOfWeek() + DAYS_PER_WEEK;\n  }\n\n  /** 在填满模式下 补充首行列 */\n  private _fillBeforeCells(): void {\n\n    const beforeMonth = this._dateAdapter.addCalendarMonths(this._dateAdapter.clone(this.activeDate), -1);\n    const daysInBeforeMonth = this._dateAdapter.getNumDaysInMonth(beforeMonth);\n    const dateNames = this._dateAdapter.getDateNames();\n    const beforeWeeks: NtDatePickerCell[] = [];\n\n    for (let i = daysInBeforeMonth - this._firstWeekOffset; i < daysInBeforeMonth; i++) {\n      beforeWeeks.push(new NtDatePickerCell(i + 1, dateNames[i], false));\n    }\n\n    this._weeks[0] = beforeWeeks.concat(this._weeks[0]);\n  }\n\n  /** 在填满模式下 补充尾部列 */\n  private _fillAfterCells(): void {\n\n    const afterMonth = this._dateAdapter.addCalendarMonths(this._dateAdapter.clone(this.activeDate), 1);\n    const lastRow = this._weeks[this._weeks.length - 1];\n    const dateNames = this._dateAdapter.getDateNames();\n    const afterWeeks: NtDatePickerCell[] = [], afterRows: NtDatePickerCell[] = [];\n\n    for (let i = 0; i < DAYS_PER_WEEK - lastRow.length; i++) {\n      afterWeeks.push(new NtDatePickerCell(i + 1, dateNames[i], false));\n    }\n\n    lastRow.push(...afterWeeks);\n\n    for (let i = 0; i < DAYS_PER_WEEK * (DAYS_MAX_ROWS - this._weeks.length); i++) {\n      afterRows.push(new NtDatePickerCell(afterWeeks.length + i + 1, dateNames[afterWeeks.length + i], false));\n    }\n\n    this._weeks.push(...afterRows.map(_ => afterRows.splice(0, DAYS_PER_WEEK)).filter(row => !!row));\n  }\n\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n      (!this.dateFilter || this.dateFilter(date)) &&\n      (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n      (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n      this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) === this._dateAdapter.getMonth(d2) &&\n      this._dateAdapter.getYear(d1) === this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","import { DateAdapter } from '@ng-tangram/components/core';\nimport { NtDatePickerCell } from './datepicker-models';\nimport { Component, EventEmitter, Input, OnInit, ViewEncapsulation, Output, ChangeDetectorRef, Optional, ChangeDetectionStrategy } from '@angular/core';\nimport { createMissingDateImplError } from './datepicker-errors';\n\nexport const yearsPerPage = 12;\n\nexport const yearsPerRow = 3;\n\n@Component({\n  selector: 'nt-datepicker-multi-year',\n  template: \"<table> <tbody> <tr *ngFor=\\\"let _rows of _years\\\"> <td *ngFor=\\\"let year of _rows\\\" [class.disabled]=\\\"!year.enabled\\\" [class.selected]=\\\"year.value === _selectedYear && year.enabled\\\" (click)=\\\"_yearSelected(year.value)\\\"> <span *ngIf=\\\"year.enabled\\\">{{ year.displayValue }}</span> <span *ngIf=\\\"!year.enabled\\\">{{ year.displayValue }}</span> </td> </tr> </tbody> </table> \",\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'nt-datepicker-multi-year'\n  }\n})\nexport class NtDatePickerMultiYearComponent<D>  {\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: NtDatePickerCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  private _activeDate: D;\n  private _selected: D | null;\n  private _minDate: D | null;\n  private _maxDate: D | null;\n\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !==\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() public _dateAdapter: DateAdapter<D>) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length === yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n      this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n      Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new NtDatePickerCell(year, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n      (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n      (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) === year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","import {\n  AfterContentInit, ChangeDetectorRef, Component, EventEmitter, Inject, Input, OnInit, Optional,\n  Output, ViewEncapsulation, ChangeDetectionStrategy\n} from '@angular/core';\nimport { DateAdapter, NT_DATE_FORMATS, NtDateFormats } from '@ng-tangram/components/core';\n\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { NtDatePickerCell } from './datepicker-models';\n\n@Component({\n  selector: 'nt-datepicker-year',\n  template: \"<table> <tbody> <tr *ngFor=\\\"let _rows of _months\\\"> <td *ngFor=\\\"let month of _rows\\\" [class.disabled]=\\\"!month.enabled\\\" [class.selected]=\\\"month.value === _selectedMonth && month.enabled\\\" (click)=\\\"_monthSelected(month.value)\\\"> <span *ngIf=\\\"month.enabled\\\">{{ month.displayValue }}</span> <span *ngIf=\\\"!month.enabled\\\">{{ month.displayValue }}</span> </td> </tr> </tbody> </table> \",\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'nt-datepicker-year'\n  }\n})\nexport class NtDatePickerYearComponent<D> implements AfterContentInit {\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: NtDatePickerCell[][];\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  private _activeDate: D;\n  private _selected: D | null;\n  private _minDate: D | null;\n  private _maxDate: D | null;\n\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n\n  get activeYear() { return this._activeDate ? this._dateAdapter.getYear(this._activeDate) : null; }\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(NT_DATE_FORMATS) private _dateFormats: NtDateFormats) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('NT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n\n    const monthNames = this._dateAdapter.getMonthNames('short');\n\n    this._months = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]].map(row => row.map(\n      month => this._createCellForMonth(month, monthNames[month])));\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n      this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n      this._dateAdapter.getYear(this.activeDate), month,\n      Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    return new NtDatePickerCell(\n      month, monthName.toLocaleUpperCase(), this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n      this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n      this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) === month;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) === this._dateAdapter.getYear(this.activeDate) ?\n      this._dateAdapter.getMonth(date) : null;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","import {\n  AfterContentInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject,\n  Input, OnChanges, OnDestroy, OnInit, Optional, Output, SimpleChanges, ViewChild, ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter, NT_DATE_FORMATS, NtDateFormats } from '@ng-tangram/components/core';\n\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { NtDatePickerMonthComponent } from './month.component';\nimport { NtDatePickerMultiYearComponent, yearsPerPage } from './multi-year.component';\nimport { NtDatePickerYearComponent } from './year.component';\n\nexport type NtDatePickerViewType = 'month' | 'year' | 'multi-year';\n\n@Component({\n  selector: 'nt-datepicker-calendar',\n  template: \"<div class=\\\"nt-datepicker-pane\\\" [ngSwitch]=\\\"_currentView\\\"> <table> <thead> <tr *ngSwitchCase=\\\"'month'\\\"><ng-container *ngTemplateOutlet=\\\"monthControl\\\"></ng-container></tr> <tr *ngSwitchCase=\\\"'year'\\\"><ng-container *ngTemplateOutlet=\\\"yearControl\\\"></ng-container></tr> <tr *ngSwitchCase=\\\"'multi-year'\\\"><ng-container *ngTemplateOutlet=\\\"multiYearControl\\\"></ng-container></tr> </thead> </table> <nt-datepicker-month *ngSwitchCase=\\\"'month'\\\" [(activeDate)]=\\\"_activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (selectedChange)=\\\"_dateSelected($event)\\\"> </nt-datepicker-month> <nt-datepicker-year *ngSwitchCase=\\\"'year'\\\" [activeDate]=\\\"_activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (monthSelected)=\\\"_monthSelectedInYearView($event)\\\" (selectedChange)=\\\"_goToDateInView($event, 'month')\\\"> </nt-datepicker-year> <nt-datepicker-multi-year *ngSwitchCase=\\\"'multi-year'\\\" [activeDate]=\\\"_activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (yearSelected)=\\\"_yearSelectedInMultiYearView($event)\\\" (selectedChange)=\\\"_goToDateInView($event, 'year')\\\"> </nt-datepicker-multi-year> </div> <ng-template #monthControl> <th (click)=\\\"prevYear()\\\" [class.disabled]=\\\"\\\"><span>&laquo;</span></th> <th (click)=\\\"prevMonth()\\\" [class.disabled]=\\\"\\\"><span>&lsaquo;</span></th> <th colspan=\\\"3\\\"> <span (click)=\\\" _currentView = 'multi-year' \\\">{{ _yearLabel }}</span> <span (click)=\\\" _currentView = 'year' \\\">{{ _monthLabel }}</span> </th> <th (click)=\\\"nextMonth()\\\" [class.disabled]=\\\"\\\"><span>&rsaquo;</span></th> <th (click)=\\\"nextYear()\\\" [class.disabled]=\\\"\\\"><span>&raquo;</span></th> </ng-template> <ng-template #yearControl> <th (click)=\\\"prevYear()\\\" [class.disabled]=\\\"\\\"><span>&laquo;</span></th> <th>&nbsp;</th> <th colspan=\\\"3\\\"> <span (click)=\\\" _currentView = 'multi-year' \\\">{{ _yearLabel }}</span> </th> <th>&nbsp;</th> <th (click)=\\\"nextYear()\\\" [class.disabled]=\\\"\\\"><span>&raquo;</span></th> </ng-template> <ng-template #multiYearControl> <th (click)=\\\"prevYearArray()\\\"><span>&laquo;</span></th> <th>&nbsp;</th> <th colspan=\\\"3\\\">{{_multiYearLabel}}</th> <th>&nbsp;</th> <th (click)=\\\"nextYearArray()\\\"><span>&raquo;</span></th> </ng-template> \",\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NtDatePickerCalendarComponent<D> implements AfterContentInit, OnChanges, OnDestroy {\n\n  _viewType: NtDatePickerViewType = 'month';\n  _currentView: NtDatePickerViewType = 'month';\n\n  private _startAt: D | null;\n\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) { this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value)); }\n\n  /** The currently selected date. */\n  private _selected: D | null;\n\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) { this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value)); }\n\n  /** The minimum selectable date. */\n  private _minDate: D | null;\n\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) { this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)); }\n\n  /** The maximum selectable date. */\n  private _maxDate: D | null;\n\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) { this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)); }\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(NtDatePickerMonthComponent) monthView: NtDatePickerMonthComponent<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(NtDatePickerYearComponent) yearView: NtDatePickerYearComponent<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(NtDatePickerMultiYearComponent) multiYearView: NtDatePickerMultiYearComponent<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  private _clampedActiveDate: D;\n\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) { this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate); }\n\n  get _monthLabel() {\n    return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel).toLocaleUpperCase();\n  }\n\n  get _yearLabel() { return this._dateAdapter.getYearName(this._activeDate); }\n\n  get _multiYearLabel() {\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n      this._dateAdapter.createDate(activeYear - activeYear % yearsPerPage, 0, 1), 'en-US');\n    const lastYearInView = this._dateAdapter.getYearName(\n      this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % yearsPerPage, 0, 1), 'en-US');\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(NT_DATE_FORMATS) private _dateFormats: NtDateFormats) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('NT_DATE_FORMATS');\n    }\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    // throw new Error(\"Method not implemented.\");\n  }\n\n  prevMonth() {\n    this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n  }\n\n  nextMonth() {\n    this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n  }\n\n  prevYear() {\n    this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n  }\n\n  nextYear() {\n    this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n  }\n\n  prevYearArray() {\n    this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerPage);\n  }\n\n  nextYearArray() {\n    this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage);\n  }\n\n  _init() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._currentView = this._viewType;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D) {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { transition, trigger } from '@angular/animations';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { OverlayOrigin } from '@angular/cdk/overlay';\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input,\n  NgZone, Optional, Output, Renderer2, Self, ViewChild, ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { fadeIn, fadeOut } from '@ng-tangram/animate/fading';\nimport {\n  DateAdapter, NT_DATE_FORMATS, NtDateFormats, NtOverlayComponent\n} from '@ng-tangram/components/core';\nimport { NtFormFieldControl } from '@ng-tangram/components/forms';\n\nimport { NtDatePickerCalendarComponent } from './calendar.component';\n\n@Component({\n  selector: 'nt-datepicker',\n  template: \"<input #inputElement type=\\\"text\\\" (focus)=\\\"_onInputFocus()\\\" readonly [placeholder]=\\\"placeholder\\\" [disabled]=\\\"disabled\\\"> <span class=\\\"nt-datepicker-caret\\\" [@fade] *ngIf=\\\"!value || disabled\\\"></span> <span class=\\\"nt-datepicker-clear\\\" (click)=\\\"clear()\\\" [@fade] *ngIf=\\\"value && !disabled\\\"></span> <nt-overlay [origin]=\\\"origin\\\" trigger=\\\"click\\\" position=\\\"bottomLeft\\\" arrow (opened)=\\\"onOpen()\\\" (closed)=\\\"onClose()\\\"> <nt-datepicker-calendar [selected]=\\\"value\\\" [dateFilter]=\\\"dateFilter\\\" [startAt]=\\\"startAt\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (selectedChange)=\\\"select($event)\\\"> </nt-datepicker-calendar> </nt-overlay> \",\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'nt-datepicker nt-form-control',\n    '[class.focus]': 'overlay.isOpen'\n  },\n  animations: [\n    trigger('fade', [\n      transition('* => void', fadeOut(.15)),\n      transition('void => *', fadeIn(.15))\n    ])\n  ],\n  providers: [\n    { provide: NtFormFieldControl, useExisting: NtDatePickerComponent }\n  ]\n})\nexport class NtDatePickerComponent<D> extends NtFormFieldControl<D> implements ControlValueAccessor {\n\n  readonly origin: OverlayOrigin;\n\n  private _disabled = false;\n  private _lastValueValid = false;\n  private _readonly = false;\n  private _required = false;\n\n  private _value: D | null;\n  private _startAt: D | null;\n  private _minDate: D | null;\n  private _maxDate: D | null;\n\n  private _focused = false;\n\n  get empty() { return !this.value; }\n  get focused(): boolean { return this._focused; }\n\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this.inputElement.nativeElement.value = value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  @Input() placeholder = '';\n\n  @Input()\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  get disabled() { return this._disabled; }\n\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  @Input()\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  get readonly() { return this._readonly; }\n\n  @Input()\n  get startAt(): D | null { return this._startAt || this.value; }\n  set startAt(value: D | null) { this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value)); }\n\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) { this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)); }\n\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) { this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)); }\n\n  @Input() dateFilter: (date: D) => boolean;\n\n  @ViewChild('inputElement') inputElement: ElementRef;\n\n  @ViewChild(NtOverlayComponent) overlay: NtOverlayComponent;\n  @ViewChild(NtDatePickerCalendarComponent) calendar: NtDatePickerCalendarComponent<D>;\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  private _valueChange = new EventEmitter<D | null>();\n  private _onChange: (value: any) => void = () => {};\n  private _onTouched = () => {};\n\n  constructor(\n    @Optional() private _dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(NT_DATE_FORMATS) private _dateFormats: NtDateFormats,\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    private _renderer: Renderer2,\n    @Self() @Optional() public ngControl: NgControl) {\n    super();\n    this.origin = new OverlayOrigin(_elementRef);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  writeValue(value: D) {\n    this.value = value;\n  }\n\n  registerOnChange(fn: (_: any) => {}) {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  _onInputFocus() {\n    if (!this.disabled) {\n      this.overlay.show();\n    }\n  }\n\n  onOpen() {\n    this._focused = true;\n    this.calendar._init();\n  }\n\n  onClose() {\n    this._focused = false;\n    typeof this._onTouched === 'function' && this._onTouched();\n  }\n\n  focus() {\n    if (!this.disabled) {\n      this.inputElement.nativeElement.focus();\n    }\n  }\n\n  select(date: D) {\n    this.value = date;\n    this.overlay.hide();\n    this._onChange(date);\n  }\n\n  clear() {\n    if (this.value !== null && !this.disabled) {\n      this.value = null;\n      this._onChange(this.value);\n    }\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this._disabled = isDisabled;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","import { NtDatePickerCalendarComponent } from './calendar.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NtNativeDateModule, NtOverlayModule } from '@ng-tangram/components/core';\n\nimport { NtDatePickerComponent } from './datepicker.component';\nimport { NtDatePickerMonthComponent } from './month.component';\nimport { NtDatePickerMultiYearComponent } from './multi-year.component';\nimport { NtDatePickerYearComponent } from './year.component';\n\n@NgModule({\n  imports: [CommonModule, NtOverlayModule, NtNativeDateModule],\n  exports: [NtDatePickerComponent],\n  declarations: [\n    NtDatePickerComponent,\n    NtDatePickerCalendarComponent,\n    NtDatePickerMonthComponent,\n    NtDatePickerYearComponent,\n    NtDatePickerMultiYearComponent\n  ]\n})\nexport class NtDatePickerModule { }\n"],"names":["provider","Error","NtDatePickerCell","value","displayValue","enabled","this","_changeDetectorRef","_dateAdapter","_dateFormats","EventEmitter","createMissingDateImplError","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","weekdays","map","long","i","narrow","_weekdays","slice","concat","_activeDate","today","NtDatePickerMonthComponent","oldActiveDate","validDate","_getValidDateOrNull","deserialize","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selected","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","cell","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","selectedChange","emit","selected","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","markForCheck","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","push","date","_shouldEnableDate","length","_fillBeforeCells","_fillAfterCells","firstDayForCurrentMonth","firstDayForWeek","beforeMonth","addCalendarMonths","clone","daysInBeforeMonth","beforeWeeks","lastRow","afterWeeks","afterRows","_a","_","splice","filter","row","dateFilter","compareDate","getDate","d1","d2","obj","isDateInstance","isValid","Component","selector","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","ChangeDetectorRef","DateAdapter","Optional","Inject","NT_DATE_FORMATS","Input","Output","NtDatePickerMultiYearComponent","Math","floor","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_this","_createCellForYear","yearSelected","month","min","yearName","getYearName","_shouldEnableYear","undefined","addCalendarDays","NtDatePickerYearComponent","Object","_selectedMonth","_getMonthInCurrentYear","_todayMonth","monthNames","_months","_createCellForMonth","normalizedDate","monthSelected","monthName","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","NtDatePickerCalendarComponent","_startAt","_clampedActiveDate","format","display","monthYearLabel","changes","change","firstChange","view","monthView","yearView","multiYearView","addCalendarYears","startAt","_currentView","_viewType","sameDate","normalizedYear","normalizedMonth","ViewChild","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","_elementRef","_ngZone","_renderer","ngControl","_super","origin","OverlayOrigin","valueAccessor","__","constructor","prototype","create","tslib_1.__extends","NtDatePickerComponent","_focused","_value","_lastValueValid","inputElement","nativeElement","dateInput","_disabled","coerceBooleanProperty","_required","_readonly","fn","_onChange","_onTouched","disabled","overlay","show","calendar","focus","hide","isDisabled","[class.focus]","animations","trigger","transition","fadeOut","fadeIn","providers","provide","NtFormFieldControl","useExisting","ElementRef","NgZone","Renderer2","NgControl","Self","NtOverlayComponent","NgModule","imports","CommonModule","NtOverlayModule","NtNativeDateModule","exports","declarations"],"mappings":"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"}