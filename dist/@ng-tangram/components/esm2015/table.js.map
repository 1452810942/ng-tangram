{"version":3,"file":"table.js","sources":["../../../../out-tsc/@ng-tangram/components/table/column.ts","../../../../out-tsc/@ng-tangram/components/table/column.directive.ts","../../../../out-tsc/@ng-tangram/components/table/table.component.ts","../../../../out-tsc/@ng-tangram/components/table/table.module.ts"],"sourcesContent":["import { InjectionToken, EventEmitter } from '@angular/core';\n\nexport class NtColumnSortChange {\n  constructor(public isUserInput = false, public column: string, public sort: string) {}\n}\n\nexport interface NtColumn {\n  sort: '' | 'asc' | 'desc';\n  sortable: boolean;\n  sorting: (isUserInput: boolean) => void;\n  sortChange: EventEmitter<NtColumnSortChange>;\n  visibled: boolean;\n}\n\nexport interface NtColumnTable {\n\n}\n\nexport const NT_COLUMN = new InjectionToken<NtColumn>('nt-column');\n\nexport const NT_COLUMN_TABLE = new InjectionToken<NtColumnTable>('nt-column-table');\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterContentInit, Component, ContentChild, Directive, ElementRef, EventEmitter, Inject, Input,\n  Optional, Output, TemplateRef, ViewChild, ViewContainerRef\n} from '@angular/core';\nimport { NT_COLUMN, NT_COLUMN_TABLE, NtColumn, NtColumnSortChange, NtColumnTable } from './column';\n\n@Directive({\n  selector: 'nt-column-header',\n  host: {\n    'class': 'nt-column-header',\n    '[class.nt-column-sortable]': 'column.sortable',\n    '[class.asc]': 'column.sort === \"asc\"',\n    '[class.desc]': 'column.sort === \"desc\"',\n    '(click)': 'column.sorting(true)'\n  }\n})\nexport class NtColumnHeaderDirective {\n  constructor(\n    public elementRef: ElementRef,\n    @Optional() @Inject(NT_COLUMN) public column: NtColumn) { }\n}\n\n@Directive({\n  selector: 'nt-column-cell',\n  host: {\n    'class': 'nt-column-cell'\n  }\n})\nexport class NtColumnCellDirective { }\n\n@Directive({ selector: '[ntColumnCellDef]' })\nexport class NtColumnCellDefDirective {\n  constructor(public template: TemplateRef<any>) { }\n}\n\n@Component({\n  selector: 'nt-column',\n  template: `\n    <ng-template>\n      <ng-content select=\"nt-column-header\"></ng-content>\n    </ng-template>\n  `,\n  providers: [\n    { provide: NT_COLUMN, useExisting: NtColumnComponent }\n  ]\n})\nexport class NtColumnComponent implements NtColumn, AfterContentInit {\n\n  private _sortable = false;\n\n  sort: '' | 'asc' | 'desc' = '';\n\n  visibled = true;\n\n  @Input()\n  set sortable(value: boolean) { this._sortable = coerceBooleanProperty(value); }\n  get sortable() { return this._sortable; }\n\n  get text () {\n    return this.header && this.header.elementRef.nativeElement.textContent;\n  }\n\n  @Input() name: string;\n\n  @Input() width: number | string = 'auto';\n\n  @Input() align: 'left' | 'center' | 'right' = 'left';\n\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  @ContentChild(NtColumnHeaderDirective) header: NtColumnHeaderDirective;\n\n  @ContentChild(NtColumnCellDefDirective) cell: NtColumnCellDefDirective;\n\n  readonly sortChange: EventEmitter<NtColumnSortChange> = new EventEmitter<NtColumnSortChange>();\n\n  constructor(\n    @Optional() @Inject(NT_COLUMN_TABLE) private _table: NtColumnTable,\n    private _viewContainerRef: ViewContainerRef,\n    private _elementRef: ElementRef) { }\n\n  /** 排序操作 */\n  sorting(isUserInput = false) {\n    if (this.sortable) {\n\n      /** 按照 升 -> 降 -> 无 的循环改变排序 */\n      if (this.sort === 'asc') {\n        this.sort = 'desc';\n      } else if (this.sort === 'desc') {\n        this.sort = '';\n      } else {\n        this.sort = 'asc';\n      }\n\n      /** 用户操作的操作才会触发事件 */\n      this.sortChange.emit(new NtColumnSortChange(isUserInput, this.name, this.sort));\n    }\n  }\n\n  ngAfterContentInit() {\n\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n  AfterContentInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild,\n  ContentChildren, ElementRef, EventEmitter, Input, NgZone, OnChanges, OnDestroy, OnInit, Output,\n  QueryList, SimpleChanges, TemplateRef, ViewChild, ViewChildren, ViewEncapsulation\n} from '@angular/core';\nimport { fadeIn } from '@ng-tangram/animate/fading';\n\nimport { Observable } from 'rxjs/Observable';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/observable/merge';\nimport { filter, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\n\nimport { NT_COLUMN_TABLE, NtColumn, NtColumnSortChange, NtColumnTable } from './column';\nimport { NtColumnComponent, NtColumnHeaderDirective } from './column.directive';\n\n@Component({\n  selector: 'nt-table',\n  template: \"<table [class]=\\\"class\\\"> <thead> <tr> <th class=\\\"nt-selector-header\\\" *ngIf=\\\"selectable\\\"> <input type=\\\"checkbox\\\" (click)=\\\"selectAll()\\\" [checked]=\\\"isAllSelected\\\"> </th> <th class=\\\"nt-column-h\\\" *ngFor=\\\"let column of columns\\\" [style.width]=\\\"column.width\\\" [style.textAlign]=\\\"column.align\\\" [class.hidden]=\\\"!column.visibled\\\"> <ng-container *ngTemplateOutlet=\\\"column.template\\\"></ng-container> </th> </tr> </thead> <tbody> <tr *ngFor=\\\"let data of dataSource\\\"> <ng-container *ngTemplateOutlet=\\\"dataRow; context: {$implicit: data};\\\"></ng-container> </tr> </tbody> </table> <ng-template #dataRow let-data> <td class=\\\"nt-selector-cell\\\" *ngIf=\\\"selectable\\\"> <input type=\\\"checkbox\\\" (click)=\\\"select(data)\\\" [checked]=\\\"checkSelected(data)\\\"> </td> <td *ngFor=\\\"let column of columns\\\" [style.textAlign]=\\\"column.align\\\" [class.hidden]=\\\"!column.visibled\\\"> <ng-container *ngTemplateOutlet=\\\"column.cell.template; context: {$implicit: data};\\\"></ng-container> </td> </ng-template> \",\n  encapsulation: ViewEncapsulation.None,\n  // changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    { provide: NT_COLUMN_TABLE, useExisting: NtTableComponent }\n  ],\n  host: {\n    'class': 'nt-table'\n  }\n})\nexport class NtTableComponent<T> implements NtColumnTable, AfterContentInit, OnChanges, OnDestroy {\n\n  columnComponent = NtColumnComponent;\n\n  @Input() class: string;\n\n  private _selectionModel: SelectionModel<T> = new SelectionModel(true, undefined, false);\n\n  private _multipleSortable = false;\n\n  private _selectable = false;\n\n  private readonly _destroy = new Subject<void>();\n\n  @ContentChildren(NtColumnComponent)\n  private _columns: QueryList<NtColumnComponent>;\n\n  get columns() { return this._columns ? this._columns.toArray() : []; }\n\n  @Input() dataSource: Array<T>;\n\n  @Input()\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n  get selectable() { return this._selectable; }\n\n  @Output() readonly selectedChange: EventEmitter<T | T[]> = new EventEmitter();\n\n  @Output() readonly sortChange: EventEmitter<NtColumnSortChange | NtColumnSortChange[]> = new EventEmitter();\n\n  readonly columSortChanges: Observable<NtColumnSortChange> = defer(() => {\n    if (this._columns) {\n      return merge(...this._columns.map(column => column.sortChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.columSortChanges));\n  });\n\n  get isAllSelected() { return this._selectionModel.selected.length === this.dataSource.length; }\n\n  get selected() { return this._selectionModel.selected; }\n\n  constructor(\n    private _ngZone: NgZone,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _element: ElementRef) { }\n\n  ngOnChanges(change: SimpleChanges) {\n    if (change && change.dataSource && !change.dataSource.firstChange) {\n      this._selectionModel.clear();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._columns.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  selectAll() {\n    if (!this.isAllSelected) {\n      this._selectionModel.select(...this.dataSource);\n    } else {\n      this._selectionModel.clear();\n    }\n    this.selectedChange.emit(this._selectionModel.selected);\n  }\n\n  select(item: T) {\n    const wasSelected = this.checkSelected(item);\n    if (wasSelected) {\n      this._selectionModel.deselect(item);\n    } else {\n      this._selectionModel.select(item);\n    }\n\n    this.selectedChange.emit(this._selectionModel.selected);\n  }\n\n  checkSelected(item: T) {\n    return this._selectionModel.isSelected(item);\n  }\n\n  private _clearSort(filter?: NtColumnSortChange) {\n    this._columns\n      .filter(column => column.name !== (filter ? filter.column : ''))\n      .forEach(column => column.sort = '');\n  }\n\n  private _resetOptions() {\n    const changedOrDestroyed = merge(this._columns.changes, this._destroy);\n\n    this.columSortChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        if (!this._multipleSortable) {\n          this._clearSort(event);\n        }\n        this.sortChange.emit(event);\n      });\n\n    merge(...this._columns.map(option => option.sortChange))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n  }\n\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NtOverlayModule } from '@ng-tangram/components/core';\n\nimport {\n  NtColumnCellDefDirective, NtColumnCellDirective, NtColumnComponent,\n  NtColumnHeaderDirective\n} from './column.directive';\nimport { NtTableComponent } from './table.component';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [\n    CommonModule,\n    NtTableComponent,\n    NtColumnComponent,\n    NtColumnCellDirective,\n    NtColumnHeaderDirective,\n    NtColumnCellDefDirective\n  ],\n  declarations: [\n    NtTableComponent,\n    NtColumnComponent,\n    NtColumnCellDirective,\n    NtColumnHeaderDirective,\n    NtColumnCellDefDirective\n  ]\n})\nexport class NtTableModule { }\n"],"names":["filter"],"mappings":"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"}