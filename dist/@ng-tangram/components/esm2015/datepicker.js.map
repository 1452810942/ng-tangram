{"version":3,"file":"datepicker.js","sources":["../../../../out-tsc/@ng-tangram/components/datepicker/datepicker-errors.ts","../../../../out-tsc/@ng-tangram/components/datepicker/datepicker-models.ts","../../../../out-tsc/@ng-tangram/components/datepicker/month.component.ts","../../../../out-tsc/@ng-tangram/components/datepicker/multi-year.component.ts","../../../../out-tsc/@ng-tangram/components/datepicker/year.component.ts","../../../../out-tsc/@ng-tangram/components/datepicker/calendar.component.ts","../../../../out-tsc/@ng-tangram/components/datepicker/datepicker.component.ts","../../../../out-tsc/@ng-tangram/components/datepicker/datepicker.module.ts"],"sourcesContent":["\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `NtDatepickerComponent: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: NtNativeDateModule or provide a ` +\n      `custom implementation.`);\n}\n","export class NtDatePickerCell {\n  constructor(\n    public value: number,\n    public displayValue: string,\n    public enabled: boolean) { }\n}\n","import {\n  AfterContentInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject,\n  Input, Optional, Output, ViewChild, ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter, NT_DATE_FORMATS, NtDateFormats } from '@ng-tangram/components/core';\n\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { NtDatePickerCell } from './datepicker-models';\n\nconst DAYS_PER_WEEK = 7;\n\nconst DAYS_MAX_ROWS = 6;\n\n@Component({\n  selector: 'nt-datepicker-month',\n  template: \"<table> <thead> <tr> <th *ngFor=\\\"let week of _weekdays\\\">{{week.narrow}}</th> </tr> </thead> <tbody> <tr *ngFor=\\\"let _rows of _weeks\\\"> <td *ngFor=\\\"let week of _rows\\\" [class.disabled]=\\\"!week.enabled\\\" [class.selected]=\\\"week.value === _selectedDate && week.enabled\\\" [class.active]=\\\"_todayDate === week.value && week.enabled\\\"> <span (click)=\\\"_dateSelected(week)\\\">{{ week.displayValue }}</span> </td> </tr> </tbody> </table> \",\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'nt-datepicker-month'\n  }\n})\nexport class NtDatePickerMonthComponent<D> implements AfterContentInit {\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: NtDatePickerCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: { long: string, narrow: string }[];\n\n  private _activeDate: D;\n  private _selected: D | null;\n  private _minDate: D | null;\n  private _maxDate: D | null;\n\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(NT_DATE_FORMATS) private _dateFormats: NtDateFormats) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('NT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return { long, narrow: narrowWeekdays[i] };\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(cell: NtDatePickerCell) {\n    if (cell.enabled && this._selectedDate !== cell.value) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, cell.value);\n      this.selectedChange.emit(selectedDate);\n    }\n  }\n\n  _init() {\n\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel = this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n      .toLocaleUpperCase();\n\n    const firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n      this._dateAdapter.getMonth(this.activeDate), 1);\n\n    this._firstWeekOffset = (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n      this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n\n    this._weeks = [[]];\n\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++ , cell++) {\n      if (cell === DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      this._weeks[this._weeks.length - 1].push(new NtDatePickerCell(i + 1, dateNames[i], enabled));\n    }\n\n    this._fillBeforeCells();\n    this._fillAfterCells();\n  }\n\n  private _getWeekOffset() {\n    const firstDayForCurrentMonth = this._dateAdapter.createDate(\n      this._dateAdapter.getYear(this.activeDate),\n      this._dateAdapter.getMonth(this.activeDate), 1);\n\n    const firstDayForWeek = this._dateAdapter.getDayOfWeek(firstDayForCurrentMonth);\n\n    return firstDayForWeek - this._dateAdapter.getFirstDayOfWeek() >= 0\n      ? firstDayForWeek - this._dateAdapter.getFirstDayOfWeek()\n      : firstDayForWeek - this._dateAdapter.getFirstDayOfWeek() + DAYS_PER_WEEK;\n  }\n\n  /** 在填满模式下 补充首行列 */\n  private _fillBeforeCells(): void {\n\n    const beforeMonth = this._dateAdapter.addCalendarMonths(this._dateAdapter.clone(this.activeDate), -1);\n    const daysInBeforeMonth = this._dateAdapter.getNumDaysInMonth(beforeMonth);\n    const dateNames = this._dateAdapter.getDateNames();\n    const beforeWeeks: NtDatePickerCell[] = [];\n\n    for (let i = daysInBeforeMonth - this._firstWeekOffset; i < daysInBeforeMonth; i++) {\n      beforeWeeks.push(new NtDatePickerCell(i + 1, dateNames[i], false));\n    }\n\n    this._weeks[0] = beforeWeeks.concat(this._weeks[0]);\n  }\n\n  /** 在填满模式下 补充尾部列 */\n  private _fillAfterCells(): void {\n\n    const afterMonth = this._dateAdapter.addCalendarMonths(this._dateAdapter.clone(this.activeDate), 1);\n    const lastRow = this._weeks[this._weeks.length - 1];\n    const dateNames = this._dateAdapter.getDateNames();\n    const afterWeeks: NtDatePickerCell[] = [], afterRows: NtDatePickerCell[] = [];\n\n    for (let i = 0; i < DAYS_PER_WEEK - lastRow.length; i++) {\n      afterWeeks.push(new NtDatePickerCell(i + 1, dateNames[i], false));\n    }\n\n    lastRow.push(...afterWeeks);\n\n    for (let i = 0; i < DAYS_PER_WEEK * (DAYS_MAX_ROWS - this._weeks.length); i++) {\n      afterRows.push(new NtDatePickerCell(afterWeeks.length + i + 1, dateNames[afterWeeks.length + i], false));\n    }\n\n    this._weeks.push(...afterRows.map(_ => afterRows.splice(0, DAYS_PER_WEEK)).filter(row => !!row));\n  }\n\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n      (!this.dateFilter || this.dateFilter(date)) &&\n      (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n      (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n      this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) === this._dateAdapter.getMonth(d2) &&\n      this._dateAdapter.getYear(d1) === this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","import { DateAdapter } from '@ng-tangram/components/core';\nimport { NtDatePickerCell } from './datepicker-models';\nimport { Component, EventEmitter, Input, OnInit, ViewEncapsulation, Output, ChangeDetectorRef, Optional, ChangeDetectionStrategy } from '@angular/core';\nimport { createMissingDateImplError } from './datepicker-errors';\n\nexport const yearsPerPage = 12;\n\nexport const yearsPerRow = 3;\n\n@Component({\n  selector: 'nt-datepicker-multi-year',\n  template: \"<table> <tbody> <tr *ngFor=\\\"let _rows of _years\\\"> <td *ngFor=\\\"let year of _rows\\\" [class.disabled]=\\\"!year.enabled\\\" [class.selected]=\\\"year.value === _selectedYear && year.enabled\\\" (click)=\\\"_yearSelected(year.value)\\\"> <span *ngIf=\\\"year.enabled\\\">{{ year.displayValue }}</span> <span *ngIf=\\\"!year.enabled\\\">{{ year.displayValue }}</span> </td> </tr> </tbody> </table> \",\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'nt-datepicker-multi-year'\n  }\n})\nexport class NtDatePickerMultiYearComponent<D>  {\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: NtDatePickerCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  private _activeDate: D;\n  private _selected: D | null;\n  private _minDate: D | null;\n  private _maxDate: D | null;\n\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !==\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() public _dateAdapter: DateAdapter<D>) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length === yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n      this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n      Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new NtDatePickerCell(year, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n      (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n      (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) === year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","import {\n  AfterContentInit, ChangeDetectorRef, Component, EventEmitter, Inject, Input, OnInit, Optional,\n  Output, ViewEncapsulation, ChangeDetectionStrategy\n} from '@angular/core';\nimport { DateAdapter, NT_DATE_FORMATS, NtDateFormats } from '@ng-tangram/components/core';\n\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { NtDatePickerCell } from './datepicker-models';\n\n@Component({\n  selector: 'nt-datepicker-year',\n  template: \"<table> <tbody> <tr *ngFor=\\\"let _rows of _months\\\"> <td *ngFor=\\\"let month of _rows\\\" [class.disabled]=\\\"!month.enabled\\\" [class.selected]=\\\"month.value === _selectedMonth && month.enabled\\\" (click)=\\\"_monthSelected(month.value)\\\"> <span *ngIf=\\\"month.enabled\\\">{{ month.displayValue }}</span> <span *ngIf=\\\"!month.enabled\\\">{{ month.displayValue }}</span> </td> </tr> </tbody> </table> \",\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'nt-datepicker-year'\n  }\n})\nexport class NtDatePickerYearComponent<D> implements AfterContentInit {\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: NtDatePickerCell[][];\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  private _activeDate: D;\n  private _selected: D | null;\n  private _minDate: D | null;\n  private _maxDate: D | null;\n\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n\n  get activeYear() { return this._activeDate ? this._dateAdapter.getYear(this._activeDate) : null; }\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(NT_DATE_FORMATS) private _dateFormats: NtDateFormats) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('NT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n\n    const monthNames = this._dateAdapter.getMonthNames('short');\n\n    this._months = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]].map(row => row.map(\n      month => this._createCellForMonth(month, monthNames[month])));\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n      this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n      this._dateAdapter.getYear(this.activeDate), month,\n      Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    return new NtDatePickerCell(\n      month, monthName.toLocaleUpperCase(), this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n      this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n      this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) === month;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) === this._dateAdapter.getYear(this.activeDate) ?\n      this._dateAdapter.getMonth(date) : null;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","import {\n  AfterContentInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject,\n  Input, OnChanges, OnDestroy, OnInit, Optional, Output, SimpleChanges, ViewChild, ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter, NT_DATE_FORMATS, NtDateFormats } from '@ng-tangram/components/core';\n\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { NtDatePickerMonthComponent } from './month.component';\nimport { NtDatePickerMultiYearComponent, yearsPerPage } from './multi-year.component';\nimport { NtDatePickerYearComponent } from './year.component';\n\nexport type NtDatePickerViewType = 'month' | 'year' | 'multi-year';\n\n@Component({\n  selector: 'nt-datepicker-calendar',\n  template: \"<div class=\\\"nt-datepicker-pane\\\" [ngSwitch]=\\\"_currentView\\\"> <table> <thead> <tr *ngSwitchCase=\\\"'month'\\\"><ng-container *ngTemplateOutlet=\\\"monthControl\\\"></ng-container></tr> <tr *ngSwitchCase=\\\"'year'\\\"><ng-container *ngTemplateOutlet=\\\"yearControl\\\"></ng-container></tr> <tr *ngSwitchCase=\\\"'multi-year'\\\"><ng-container *ngTemplateOutlet=\\\"multiYearControl\\\"></ng-container></tr> </thead> </table> <nt-datepicker-month *ngSwitchCase=\\\"'month'\\\" [(activeDate)]=\\\"_activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (selectedChange)=\\\"_dateSelected($event)\\\"> </nt-datepicker-month> <nt-datepicker-year *ngSwitchCase=\\\"'year'\\\" [activeDate]=\\\"_activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (monthSelected)=\\\"_monthSelectedInYearView($event)\\\" (selectedChange)=\\\"_goToDateInView($event, 'month')\\\"> </nt-datepicker-year> <nt-datepicker-multi-year *ngSwitchCase=\\\"'multi-year'\\\" [activeDate]=\\\"_activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (yearSelected)=\\\"_yearSelectedInMultiYearView($event)\\\" (selectedChange)=\\\"_goToDateInView($event, 'year')\\\"> </nt-datepicker-multi-year> </div> <ng-template #monthControl> <th (click)=\\\"prevYear()\\\" [class.disabled]=\\\"\\\"><span>&laquo;</span></th> <th (click)=\\\"prevMonth()\\\" [class.disabled]=\\\"\\\"><span>&lsaquo;</span></th> <th colspan=\\\"3\\\"> <span (click)=\\\" _currentView = 'multi-year' \\\">{{ _yearLabel }}</span> <span (click)=\\\" _currentView = 'year' \\\">{{ _monthLabel }}</span> </th> <th (click)=\\\"nextMonth()\\\" [class.disabled]=\\\"\\\"><span>&rsaquo;</span></th> <th (click)=\\\"nextYear()\\\" [class.disabled]=\\\"\\\"><span>&raquo;</span></th> </ng-template> <ng-template #yearControl> <th (click)=\\\"prevYear()\\\" [class.disabled]=\\\"\\\"><span>&laquo;</span></th> <th>&nbsp;</th> <th colspan=\\\"3\\\"> <span (click)=\\\" _currentView = 'multi-year' \\\">{{ _yearLabel }}</span> </th> <th>&nbsp;</th> <th (click)=\\\"nextYear()\\\" [class.disabled]=\\\"\\\"><span>&raquo;</span></th> </ng-template> <ng-template #multiYearControl> <th (click)=\\\"prevYearArray()\\\"><span>&laquo;</span></th> <th>&nbsp;</th> <th colspan=\\\"3\\\">{{_multiYearLabel}}</th> <th>&nbsp;</th> <th (click)=\\\"nextYearArray()\\\"><span>&raquo;</span></th> </ng-template> \",\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NtDatePickerCalendarComponent<D> implements AfterContentInit, OnChanges, OnDestroy {\n\n  _viewType: NtDatePickerViewType = 'month';\n  _currentView: NtDatePickerViewType = 'month';\n\n  private _startAt: D | null;\n\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) { this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value)); }\n\n  /** The currently selected date. */\n  private _selected: D | null;\n\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) { this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value)); }\n\n  /** The minimum selectable date. */\n  private _minDate: D | null;\n\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) { this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)); }\n\n  /** The maximum selectable date. */\n  private _maxDate: D | null;\n\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) { this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)); }\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(NtDatePickerMonthComponent) monthView: NtDatePickerMonthComponent<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(NtDatePickerYearComponent) yearView: NtDatePickerYearComponent<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(NtDatePickerMultiYearComponent) multiYearView: NtDatePickerMultiYearComponent<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  private _clampedActiveDate: D;\n\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) { this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate); }\n\n  get _monthLabel() {\n    return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel).toLocaleUpperCase();\n  }\n\n  get _yearLabel() { return this._dateAdapter.getYearName(this._activeDate); }\n\n  get _multiYearLabel() {\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n      this._dateAdapter.createDate(activeYear - activeYear % yearsPerPage, 0, 1), 'en-US');\n    const lastYearInView = this._dateAdapter.getYearName(\n      this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % yearsPerPage, 0, 1), 'en-US');\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(NT_DATE_FORMATS) private _dateFormats: NtDateFormats) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('NT_DATE_FORMATS');\n    }\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    // throw new Error(\"Method not implemented.\");\n  }\n\n  prevMonth() {\n    this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n  }\n\n  nextMonth() {\n    this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n  }\n\n  prevYear() {\n    this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n  }\n\n  nextYear() {\n    this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n  }\n\n  prevYearArray() {\n    this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerPage);\n  }\n\n  nextYearArray() {\n    this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage);\n  }\n\n  _init() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._currentView = this._viewType;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D) {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","import { transition, trigger } from '@angular/animations';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { OverlayOrigin } from '@angular/cdk/overlay';\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input,\n  NgZone, Optional, Output, Renderer2, Self, ViewChild, ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { fadeIn, fadeOut } from '@ng-tangram/animate/fading';\nimport {\n  DateAdapter, NT_DATE_FORMATS, NtDateFormats, NtOverlayComponent\n} from '@ng-tangram/components/core';\nimport { NtFormFieldControl } from '@ng-tangram/components/forms';\n\nimport { NtDatePickerCalendarComponent } from './calendar.component';\n\n@Component({\n  selector: 'nt-datepicker',\n  template: \"<input #inputElement type=\\\"text\\\" (focus)=\\\"_onInputFocus()\\\" readonly [placeholder]=\\\"placeholder\\\" [disabled]=\\\"disabled\\\"> <span class=\\\"nt-datepicker-caret\\\" [@fade] *ngIf=\\\"!value || disabled\\\"></span> <span class=\\\"nt-datepicker-clear\\\" (click)=\\\"clear()\\\" [@fade] *ngIf=\\\"value && !disabled\\\"></span> <nt-overlay [origin]=\\\"origin\\\" trigger=\\\"click\\\" position=\\\"bottomLeft\\\" arrow (opened)=\\\"onOpen()\\\" (closed)=\\\"onClose()\\\"> <nt-datepicker-calendar [selected]=\\\"value\\\" [dateFilter]=\\\"dateFilter\\\" [startAt]=\\\"startAt\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (selectedChange)=\\\"select($event)\\\"> </nt-datepicker-calendar> </nt-overlay> \",\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'nt-datepicker nt-form-control',\n    '[class.focus]': 'overlay.isOpen'\n  },\n  animations: [\n    trigger('fade', [\n      transition('* => void', fadeOut(.15)),\n      transition('void => *', fadeIn(.15))\n    ])\n  ],\n  providers: [\n    { provide: NtFormFieldControl, useExisting: NtDatePickerComponent }\n  ]\n})\nexport class NtDatePickerComponent<D> extends NtFormFieldControl<D> implements ControlValueAccessor {\n\n  readonly origin: OverlayOrigin;\n\n  private _disabled = false;\n  private _lastValueValid = false;\n  private _readonly = false;\n  private _required = false;\n\n  private _value: D | null;\n  private _startAt: D | null;\n  private _minDate: D | null;\n  private _maxDate: D | null;\n\n  private _focused = false;\n\n  get empty() { return !this.value; }\n  get focused(): boolean { return this._focused; }\n\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this.inputElement.nativeElement.value = value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  @Input() placeholder = '';\n\n  @Input()\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  get disabled() { return this._disabled; }\n\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  @Input()\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  get readonly() { return this._readonly; }\n\n  @Input()\n  get startAt(): D | null { return this._startAt || this.value; }\n  set startAt(value: D | null) { this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value)); }\n\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) { this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)); }\n\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) { this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)); }\n\n  @Input() dateFilter: (date: D) => boolean;\n\n  @ViewChild('inputElement') inputElement: ElementRef;\n\n  @ViewChild(NtOverlayComponent) overlay: NtOverlayComponent;\n  @ViewChild(NtDatePickerCalendarComponent) calendar: NtDatePickerCalendarComponent<D>;\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  private _valueChange = new EventEmitter<D | null>();\n  private _onChange: (value: any) => void = () => {};\n  private _onTouched = () => {};\n\n  constructor(\n    @Optional() private _dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(NT_DATE_FORMATS) private _dateFormats: NtDateFormats,\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    private _renderer: Renderer2,\n    @Self() @Optional() public ngControl: NgControl) {\n    super();\n    this.origin = new OverlayOrigin(_elementRef);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  writeValue(value: D) {\n    this.value = value;\n  }\n\n  registerOnChange(fn: (_: any) => {}) {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  _onInputFocus() {\n    if (!this.disabled) {\n      this.overlay.show();\n    }\n  }\n\n  onOpen() {\n    this._focused = true;\n    this.calendar._init();\n  }\n\n  onClose() {\n    this._focused = false;\n    typeof this._onTouched === 'function' && this._onTouched();\n  }\n\n  focus() {\n    if (!this.disabled) {\n      this.inputElement.nativeElement.focus();\n    }\n  }\n\n  select(date: D) {\n    this.value = date;\n    this.overlay.hide();\n    this._onChange(date);\n  }\n\n  clear() {\n    if (this.value !== null && !this.disabled) {\n      this.value = null;\n      this._onChange(this.value);\n    }\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this._disabled = isDisabled;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","import { NtDatePickerCalendarComponent } from './calendar.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NtNativeDateModule, NtOverlayModule } from '@ng-tangram/components/core';\n\nimport { NtDatePickerComponent } from './datepicker.component';\nimport { NtDatePickerMonthComponent } from './month.component';\nimport { NtDatePickerMultiYearComponent } from './multi-year.component';\nimport { NtDatePickerYearComponent } from './year.component';\n\n@NgModule({\n  imports: [CommonModule, NtOverlayModule, NtNativeDateModule],\n  exports: [NtDatePickerComponent],\n  declarations: [\n    NtDatePickerComponent,\n    NtDatePickerCalendarComponent,\n    NtDatePickerMonthComponent,\n    NtDatePickerYearComponent,\n    NtDatePickerMultiYearComponent\n  ]\n})\nexport class NtDatePickerModule { }\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AASA,oCAA2C,QAAgB;IACzD,OAAO,KAAK,CACR,gDAAgD,QAAQ,yCAAyC;QACjG,oEAAoE;QACpE,wBAAwB,CAAC,CAAC;CAC/B;;;;;;ACdD;;;;;;IACE,YACS,OACA,cACA;QAFA,UAAK,GAAL,KAAK;QACL,iBAAY,GAAZ,YAAY;QACZ,YAAO,GAAP,OAAO;KAAc;CAC/B;;;;;;ACLD,AASA,uBAAM,aAAa,GAAG,CAAC,CAAC;AAExB,uBAAM,aAAa,GAAG,CAAC,CAAC;;;;AAWxB;;;;;;IAyEE,YACU,oBACY,cACyB;QAFrC,uBAAkB,GAAlB,kBAAkB;QACN,iBAAY,GAAZ,YAAY;QACa,iBAAY,GAAZ,YAAY;;;;8BARC,IAAI,YAAY,EAAY;;;;gCAGjC,IAAI,YAAY,EAAK;QAO1E,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,0BAA0B,CAAC,aAAa,CAAC,CAAC;SACjD;QAED,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,0BAA0B,CAAC,iBAAiB,CAAC,CAAC;SACrD;QAED,uBAAM,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC;QAC7D,uBAAM,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACrE,uBAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;;QAGjE,qBAAI,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;YACtC,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC;SAC5C,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC;QAC1F,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;KAC9C;;;;;QAhEG,UAAU,KAAQ,OAAO,IAAI,CAAC,WAAW,CAAC;;;;;IAC9C,IAAI,UAAU,CAAC,KAAQ;QACrB,uBAAM,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC;QACvC,uBAAM,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QAC9G,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACtF,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE;YAC/D,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;KACF;;;;;QAIG,QAAQ,KAAe,OAAO,IAAI,CAAC,SAAS,CAAC;;;;;IACjD,IAAI,QAAQ,CAAC,KAAe;QAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QAChF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAClE;;;;;QAIG,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;;IAC/C,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KAChF;;;;;QAIG,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;;IAC/C,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KAChF;;;;IAoCD,kBAAkB;QAChB,IAAI,CAAC,KAAK,EAAE,CAAC;KACd;;;;;;IAGD,aAAa,CAAC,IAAsB;QAClC,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,aAAa,KAAK,IAAI,CAAC,KAAK,EAAE;YACrD,uBAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAChE,uBAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAClE,uBAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,YAAY,EAAE,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3F,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACxC;KACF;;;;IAED,KAAK;QAEH,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEhE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC,CAAC;QACzE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aACrG,iBAAiB,EAAE,CAAC;QAEvB,uBAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAC1F,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;QAElD,IAAI,CAAC,gBAAgB,GAAG,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,YAAY,CAAC;YACnF,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,IAAI,aAAa,CAAC;QAEzD,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;KACxC;;;;;IAGO,gBAAgB;QACtB,uBAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACzE,uBAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;QAEnD,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC;QAEnB,KAAK,qBAAI,CAAC,GAAG,CAAC,mBAAE,IAAI,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAG,IAAI,EAAE,EAAE;YAC3E,IAAI,IAAI,KAAK,aAAa,EAAE;gBAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACrB,IAAI,GAAG,CAAC,CAAC;aACV;YACD,uBAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YAC1I,uBAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,gBAAgB,CAAC,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;SAC9F;QAED,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,eAAe,EAAE,CAAC;;;;;IAGjB,cAAc;QACpB,uBAAM,uBAAuB,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAC1D,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAC1C,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;QAElD,uBAAM,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,uBAAuB,CAAC,CAAC;QAEhF,OAAO,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,IAAI,CAAC;cAC/D,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE;cACvD,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,GAAG,aAAa,CAAC;;;;;;IAItE,gBAAgB;QAEtB,uBAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACtG,uBAAM,iBAAiB,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;QAC3E,uBAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;QACnD,uBAAM,WAAW,GAAuB,EAAE,CAAC;QAE3C,KAAK,qBAAI,CAAC,GAAG,iBAAiB,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC,GAAG,iBAAiB,EAAE,CAAC,EAAE,EAAE;YAClF,WAAW,CAAC,IAAI,CAAC,IAAI,gBAAgB,CAAC,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;SACpE;QAED,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;;;;;;IAI9C,eAAe;QAErB,uBAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;QACpG,uBAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACpD,uBAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;QACnD,uBAAM,UAAU,GAAuB,EAAE,mBAAE,SAAS,GAAuB,EAAE,CAAC;QAE9E,KAAK,qBAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvD,UAAU,CAAC,IAAI,CAAC,IAAI,gBAAgB,CAAC,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;SACnE;QAED,OAAO,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,CAAC;QAE5B,KAAK,qBAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,IAAI,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,EAAE;YAC7E,SAAS,CAAC,IAAI,CAAC,IAAI,gBAAgB,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;SAC1G;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;IAK3F,iBAAiB,CAAC,IAAO;QAC/B,OAAO,CAAC,CAAC,IAAI;aACV,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;aAC1C,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACxE,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;;;;;;;;IAOtE,sBAAsB,CAAC,IAAc;QAC3C,OAAO,IAAI,IAAI,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC;YAC7D,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;;;;;;;;IAInC,oBAAoB,CAAC,EAAY,EAAE,EAAY;QACrD,OAAO,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC;YACrF,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;;;;;;IAO7D,mBAAmB,CAAC,GAAQ;QAClC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC;;;;YA7OjG,SAAS,SAAC;gBACT,QAAQ,EAAE,qBAAqB;gBAC/B,QAAQ,EAAE,mbAAmb;gBAC7b,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,IAAI,EAAE;oBACJ,OAAO,EAAE,qBAAqB;iBAC/B;aACF;;;;YApB4C,iBAAiB;YAGrD,WAAW,uBA6Ff,QAAQ;4CACR,QAAQ,YAAI,MAAM,SAAC,eAAe;;;2BA7CpC,KAAK;yBAYL,KAAK;wBAQL,KAAK;wBAOL,KAAK;2BAOL,KAAK;+BAGL,MAAM;iCAGN,MAAM;;;;;;;AC7FT,uBAKa,YAAY,GAAG,EAAE,CAAC;AAE/B,uBAAa,WAAW,GAAG,CAAC,CAAC;;;;AAW7B;;;;;IA4DE,YACU,oBACW;QADX,uBAAkB,GAAlB,kBAAkB;QACP,iBAAY,GAAZ,YAAY;;;;8BAPoB,IAAI,YAAY,EAAK;;;;4BAGvB,IAAI,YAAY,EAAK;QAKtE,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,0BAA0B,CAAC,aAAa,CAAC,CAAC;SACjD;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;KAC9C;;;;QAnDG,UAAU,KAAQ,OAAO,IAAI,CAAC,WAAW,CAAC;;;;;IAC9C,IAAI,UAAU,CAAC,KAAQ;QACrB,qBAAI,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC;QACrC,uBAAM,SAAS,GACX,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QAChG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACtF,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,YAAY,CAAC;YACnE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,YAAY,CAAC,EAAE;YAC1E,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;KACF;;;;;QAIG,QAAQ,KAAe,OAAO,IAAI,CAAC,SAAS,CAAC;;;;;IACjD,IAAI,QAAQ,CAAC,KAAe;QAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QAChF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAClF;;;;;QAIG,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;;IAC/C,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KAChF;;;;;QAIG,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;;IAC/C,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KAChF;;;;IAqBD,kBAAkB;QAChB,IAAI,CAAC,KAAK,EAAE,CAAC;KACd;;;;IAED,KAAK;QACH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC,CAAC;QACvE,qBAAI,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC7D,qBAAI,YAAY,GAAG,UAAU,GAAG,YAAY,CAAC;QAC7C,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,KAAK,qBAAI,CAAC,GAAG,CAAC,mBAAE,GAAG,GAAa,EAAE,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,EAAE;YACzD,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,YAAY,GAAG,CAAC,CAAC,CAAC;YACxC,IAAI,GAAG,CAAC,MAAM,KAAK,WAAW,EAAE;gBAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACjE,GAAG,GAAG,EAAE,CAAC;aACV;SACF;QACD,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;KACxC;;;;;;IAGD,aAAa,CAAC,IAAY;QACxB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACjE,qBAAI,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxD,qBAAI,WAAW,GACb,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;QACpF,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,EAC/D,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;KACvE;;;;;;IAGO,kBAAkB,CAAC,IAAY;QACrC,qBAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACvF,OAAO,IAAI,gBAAgB,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;;;;;;;IAIpE,iBAAiB,CAAC,IAAY;;QAEpC,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI;aACpC,IAAI,CAAC,OAAO,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC/D,IAAI,CAAC,OAAO,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE;YAClE,OAAO,KAAK,CAAC;SACd;;QAGD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO,IAAI,CAAC;SACb;QAED,uBAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;QAG7D,KAAK,qBAAI,IAAI,GAAG,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,IAAI,EACnE,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE;YACnD,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBACzB,OAAO,IAAI,CAAC;aACb;SACF;QAED,OAAO,KAAK,CAAC;;;;;;IAOP,mBAAmB,CAAC,GAAQ;QAClC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC;;;;YAlJjG,SAAS,SAAC;gBACT,QAAQ,EAAE,0BAA0B;gBACpC,QAAQ,EAAE,0XAA0X;gBACpY,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,IAAI,EAAE;oBACJ,OAAO,EAAE,0BAA0B;iBACpC;aACF;;;;YAf2E,iBAAiB;YAFpF,WAAW,uBAgFf,QAAQ;;;2BA9CV,KAAK;yBAcL,KAAK;wBAQL,KAAK;wBAOL,KAAK;2BAOL,KAAK;+BAGL,MAAM;6BAGN,MAAM;;;;;;;AC5ET;;;AAkBA;;;;;;IAgEE,YACU,oBACY,cACyB;QAFrC,uBAAkB,GAAlB,kBAAkB;QACN,iBAAY,GAAZ,YAAY;QACa,iBAAY,GAAZ,YAAY;;;;8BARN,IAAI,YAAY,EAAK;;;;6BAGtB,IAAI,YAAY,EAAK;QAOvE,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,0BAA0B,CAAC,aAAa,CAAC,CAAC;SACjD;QAED,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,0BAA0B,CAAC,iBAAiB,CAAC,CAAC;SACrD;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;KAC9C;;;;QA1DG,UAAU,KAAQ,OAAO,IAAI,CAAC,WAAW,CAAC;;;;;IAC9C,IAAI,UAAU,CAAC,KAAQ;QACrB,qBAAI,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC;QACrC,uBAAM,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QAC9G,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAEtF,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YAC5F,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;KACF;;;;IAED,IAAI,UAAU,KAAK,OAAO,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,EAAE;;;;;QAI9F,QAAQ,KAAe,OAAO,IAAI,CAAC,SAAS,CAAC;;;;;IACjD,IAAI,QAAQ,CAAC,KAAe;QAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QAChF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KACnE;;;;;QAIG,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;;IAC/C,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KAChF;;;;;QAIG,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;;IAC/C,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KAChF;;;;IA2BD,kBAAkB;QAChB,IAAI,CAAC,KAAK,EAAE,CAAC;KACd;;;;IAED,KAAK;QACH,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACjE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC,CAAC;QAE1E,uBAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAE5D,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,CAC9E,KAAK,IAAI,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAEhE,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;KACxC;;;;;;IAGD,cAAc,CAAC,KAAa;QAC1B,uBAAM,cAAc,GAClB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QAErF,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAExC,uBAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;QAExE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CACnD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,EACjD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;KACvE;;;;;;;IAGO,mBAAmB,CAAC,KAAa,EAAE,SAAiB;QAC1D,OAAO,IAAI,gBAAgB,CACzB,KAAK,EAAE,SAAS,CAAC,iBAAiB,EAAE,EAAE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;;;;;;;IAIlE,kBAAkB,CAAC,KAAa;QAEtC,uBAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE9D,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI;YACvC,IAAI,CAAC,2BAA2B,CAAC,UAAU,EAAE,KAAK,CAAC;YACnD,IAAI,CAAC,4BAA4B,CAAC,UAAU,EAAE,KAAK,CAAC,EAAE;YACtD,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO,IAAI,CAAC;SACb;QAED,uBAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;;QAGxE,KAAK,qBAAI,IAAI,GAAG,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,KAAK,EACtE,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE;YACnD,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBACzB,OAAO,IAAI,CAAC;aACb;SACF;QAED,OAAO,KAAK,CAAC;;;;;;;;;IAOP,2BAA2B,CAAC,IAAY,EAAE,KAAa;QAC7D,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,uBAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACxD,uBAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAE1D,OAAO,IAAI,GAAG,OAAO,KAAK,IAAI,KAAK,OAAO,IAAI,KAAK,GAAG,QAAQ,CAAC,CAAC;SACjE;QAED,OAAO,KAAK,CAAC;;;;;;;;;IAOP,4BAA4B,CAAC,IAAY,EAAE,KAAa;QAC9D,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,uBAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACxD,uBAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAE1D,OAAO,IAAI,GAAG,OAAO,KAAK,IAAI,KAAK,OAAO,IAAI,KAAK,GAAG,QAAQ,CAAC,CAAC;SACjE;QAED,OAAO,KAAK,CAAC;;;;;;;;IAOP,sBAAsB,CAAC,IAAc;QAC3C,OAAO,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC;YAC3F,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;;;;;;IAOpC,mBAAmB,CAAC,GAAQ;QAClC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC;;;;YArMjG,SAAS,SAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,QAAQ,EAAE,sYAAsY;gBAChZ,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,IAAI,EAAE;oBACJ,OAAO,EAAE,oBAAoB;iBAC9B;aACF;;;;YAhBmB,iBAAiB;YAG5B,WAAW,uBAgFf,QAAQ;4CACR,QAAQ,YAAI,MAAM,SAAC,eAAe;;;2BAhDpC,KAAK;yBAeL,KAAK;wBAQL,KAAK;wBAOL,KAAK;2BAOL,KAAK;+BAGL,MAAM;8BAGN,MAAM;;;;;;;AChFT;;;AAmBA;;;;;;IAmFE,YACU,oBACY,cACyB;QAFrC,uBAAkB,GAAlB,kBAAkB;QACN,iBAAY,GAAZ,YAAY;QACa,iBAAY,GAAZ,YAAY;yBApFzB,OAAO;4BACJ,OAAO;;;;8BAiCS,IAAI,YAAY,EAAK;;;;;4BAMvB,IAAI,YAAY,EAAK;;;;;6BAMpB,IAAI,YAAY,EAAK;QAwCvE,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,0BAA0B,CAAC,aAAa,CAAC,CAAC;SACjD;QAED,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,0BAA0B,CAAC,iBAAiB,CAAC,CAAC;SACrD;KACF;;;;QAvFG,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;;IAC/C,IAAI,OAAO,CAAC,KAAe,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;;;;QAM5G,QAAQ,KAAe,OAAO,IAAI,CAAC,SAAS,CAAC;;;;;IACjD,IAAI,QAAQ,CAAC,KAAe,IAAI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;;;;QAM9G,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;;IAC/C,IAAI,OAAO,CAAC,KAAe,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;;;;QAM5G,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;;IAC/C,IAAI,OAAO,CAAC,KAAe,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;;;;IAmChH,IAAI,WAAW,KAAQ,OAAO,IAAI,CAAC,kBAAkB,CAAC,EAAE;;;;;IACxD,IAAI,WAAW,CAAC,KAAQ,IAAI,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE;;;;IAEvH,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,iBAAiB,EAAE,CAAC;KACjH;;;;IAED,IAAI,UAAU,KAAK,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE;;;;IAE5E,IAAI,eAAe;QACjB,uBAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/D,uBAAM,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,CACnD,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,UAAU,GAAG,UAAU,GAAG,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;QACvF,uBAAM,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,CAClD,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,UAAU,GAAG,YAAY,GAAG,CAAC,GAAG,UAAU,GAAG,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;QAC1G,OAAO,GAAG,eAAe,WAAW,cAAc,EAAE,CAAC;KACtD;;;;IAgBD,kBAAkB;QAChB,IAAI,CAAC,KAAK,EAAE,CAAC;KACd;;;;;IAED,WAAW,CAAC,OAAsB;QAChC,uBAAM,MAAM,GAAG,OAAO,eAAY,OAAO,WAAQ,IAAI,OAAO,cAAW,CAAC;QACxE,IAAI,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;YACjC,uBAAM,IAAI,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,aAAa,CAAC;YACnE,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,KAAK,EAAE,CAAC;aACd;SACF;KACF;;;;IAED,WAAW;;KAEV;;;;IAED,SAAS;QACP,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;KAC9E;;;;IAED,SAAS;QACP,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;KAC7E;;;;IAED,QAAQ;QACN,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;KAC7E;;;;IAED,QAAQ;QACN,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;KAC5E;;;;IAED,aAAa;QACX,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,YAAY,CAAC,CAAC;KACxF;;;;IAED,aAAa;QACX,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;KACvF;;;;IAED,KAAK;QACH,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QAC7D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC;QACnC,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;KACxC;;;;;;IAGD,aAAa,CAAC,IAAO;QACnB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;YACpD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAChC;KACF;;;;;;IAGD,4BAA4B,CAAC,cAAiB;QAC5C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;KACxC;;;;;;IAGD,wBAAwB,CAAC,eAAkB;QACzC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;KAC1C;;;;;;;IAGD,eAAe,CAAC,IAAO,EAAE,IAAqC;QAC5D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;KAC1B;;;;;IAMO,mBAAmB,CAAC,GAAQ;QAClC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC;;;;YAnLjG,SAAS,SAAC;gBACT,QAAQ,EAAE,wBAAwB;gBAClC,QAAQ,EAAE,wyEAAwyE;gBAClzE,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;aAChD;;;;YAjB4C,iBAAiB;YAGrD,WAAW,uBAoGf,QAAQ;4CACR,QAAQ,YAAI,MAAM,SAAC,eAAe;;;wBA/EpC,KAAK;yBAOL,KAAK;wBAOL,KAAK;wBAOL,KAAK;2BAKL,KAAK;+BAGL,MAAM;6BAMN,MAAM;8BAMN,MAAM;0BAGN,SAAS,SAAC,0BAA0B;yBAGpC,SAAS,SAAC,yBAAyB;8BAGnC,SAAS,SAAC,8BAA8B;;;;;;;AC5E3C;;;AAkCA,2BAAsC,SAAQ,kBAAqB;;;;;;;;;IAqEjE,YACsB,cACyB,cACrC,aACA,SACA,WACmB;QAC3B,KAAK,EAAE,CAAC;QANY,iBAAY,GAAZ,YAAY;QACa,iBAAY,GAAZ,YAAY;QACjD,gBAAW,GAAX,WAAW;QACX,YAAO,GAAP,OAAO;QACP,cAAS,GAAT,SAAS;QACU,cAAS,GAAT,SAAS;yBAvElB,KAAK;+BACC,KAAK;yBACX,KAAK;yBACL,KAAK;wBAON,KAAK;2BAeD,EAAE;;;;4BAoCF,IAAI,YAAY,EAAY;yBACT,SAAQ;0BAC7B,SAAQ;QAU3B,IAAI,CAAC,MAAM,GAAG,IAAI,aAAa,CAAC,WAAW,CAAC,CAAC;QAC7C,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,SAAS,CAAC,aAAa,GAAG,IAAI,CAAC;SACrC;KACF;;;;IAjED,IAAI,KAAK,KAAK,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;;;;IACnC,IAAI,OAAO,KAAc,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;;;;IAEhD,IAAI,KAAK,KAAe,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE;;;;;IAC7C,IAAI,KAAK,CAAC,KAAe;QACvB,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC7C,IAAI,CAAC,eAAe,GAAG,CAAC,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAClE,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QACxC,uBAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;KAC3H;;;;;QAKG,QAAQ,CAAC,KAAc,IAAI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;;;;IAC7E,IAAI,QAAQ,KAAK,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;;;;QAGrC,QAAQ,KAAc,OAAO,IAAI,CAAC,SAAS,CAAC;;;;;IAChD,IAAI,QAAQ,CAAC,KAAc;QACzB,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;KAC/C;;;;;QAGG,QAAQ,CAAC,KAAc,IAAI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;;;;IAC7E,IAAI,QAAQ,KAAK,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;;;;QAGrC,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC;;;;;IAC7D,IAAI,OAAO,CAAC,KAAe,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;;;;QAG5G,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;;IAC/C,IAAI,OAAO,CAAC,KAAe,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;;;;QAG5G,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC;;;;;IAC/C,IAAI,OAAO,CAAC,KAAe,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;;;;;IA4BhH,UAAU,CAAC,KAAQ;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACpB;;;;;IAED,gBAAgB,CAAC,EAAkB;QACjC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;KACrB;;;;;IAED,iBAAiB,CAAC,EAAY;QAC5B,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;KACtB;;;;IAED,aAAa;QACX,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;SACrB;KACF;;;;IAED,MAAM;QACJ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;KACvB;;;;IAED,OAAO;QACL,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,OAAO,IAAI,CAAC,UAAU,KAAK,UAAU,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;KAC5D;;;;IAED,KAAK;QACH,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;SACzC;KACF;;;;;IAED,MAAM,CAAC,IAAO;QACZ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QACpB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;KACtB;;;;IAED,KAAK;QACH,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YACzC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC5B;KACF;;;;;IAED,gBAAgB,CAAC,UAAmB;QAClC,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC;KAC7B;;;;;IAMO,mBAAmB,CAAC,GAAQ;QAClC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC;;;;YA7JjG,SAAS,SAAC;gBACT,QAAQ,EAAE,eAAe;gBACzB,QAAQ,EAAE,6oBAA6oB;gBACvpB,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,IAAI,EAAE;oBACJ,OAAO,EAAE,+BAA+B;oBACxC,eAAe,EAAE,gBAAgB;iBAClC;gBACD,UAAU,EAAE;oBACV,OAAO,CAAC,MAAM,EAAE;wBACd,UAAU,CAAC,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;wBACrC,UAAU,CAAC,WAAW,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;qBACrC,CAAC;iBACH;gBACD,SAAS,EAAE;oBACT,EAAE,OAAO,EAAE,kBAAkB,EAAE,WAAW,EAAE,qBAAqB,EAAE;iBACpE;aACF;;;;YAvBC,WAAW,uBA8FR,QAAQ;4CACR,QAAQ,YAAI,MAAM,SAAC,eAAe;YArGkB,UAAU;YACjE,MAAM;YAAoB,SAAS;YAEN,SAAS,uBAsGnC,IAAI,YAAI,QAAQ;;;4BA9ClB,KAAK;yBAEL,KAAK;yBAIL,KAAK;yBAML,KAAK;wBAIL,KAAK;wBAIL,KAAK;wBAIL,KAAK;2BAIL,KAAK;6BAEL,SAAS,SAAC,cAAc;wBAExB,SAAS,SAAC,kBAAkB;yBAC5B,SAAS,SAAC,6BAA6B;;;;;;;AChG1C;;;YAUC,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,YAAY,EAAE,eAAe,EAAE,kBAAkB,CAAC;gBAC5D,OAAO,EAAE,CAAC,qBAAqB,CAAC;gBAChC,YAAY,EAAE;oBACZ,qBAAqB;oBACrB,6BAA6B;oBAC7B,0BAA0B;oBAC1B,yBAAyB;oBACzB,8BAA8B;iBAC/B;aACF;;;;;;;;;;;;;;;;;"}