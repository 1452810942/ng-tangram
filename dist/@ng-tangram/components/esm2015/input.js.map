{"version":3,"file":"input.js","sources":["../../../../out-tsc/@ng-tangram/components/input/input.directive.ts","../../../../out-tsc/@ng-tangram/components/input/input.module.ts"],"sourcesContent":["\n\nimport { Component, OnInit, Directive, Input, ElementRef, Optional, Self } from '@angular/core';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NtFormFieldControl } from '@ng-tangram/components/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NgControl } from '@angular/forms';\n\n@Directive({\n  selector: 'input[ntInput], textarea[ntInput]',\n  host: {\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n  },\n  providers: [\n    { provide: NtFormFieldControl, useExisting: NtInputDirective }\n  ]\n})\nexport class NtInputDirective extends NtFormFieldControl<any> {\n\n  private _disabled = false;\n  private _value: any;\n  private _type = 'text';\n  private _readonly = false;\n  private _required = false;\n\n  _focused = false;\n\n  @Input() placeholder = '';\n\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    if (this._focused) {\n      this._focused = false;\n    }\n  }\n\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  @Input()\n  get value(): string { return this._elementRef.nativeElement.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._elementRef.nativeElement.value = value;\n    }\n  }\n\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n\n  get empty(): boolean { return !this._elementRef.nativeElement.value && !this._isBadInput(); }\n\n  constructor(\n    @Optional() @Self() public ngControl: NgControl,\n    private _platform: Platform,\n    private _elementRef: ElementRef) { super();\n  }\n\n  focus() { this._elementRef.nativeElement.focus(); }\n\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this._focused && !this.readonly) {\n      this._focused = isFocused;\n    }\n  }\n\n  protected _isBadInput() {\n    const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  private _isTextarea() {\n    const nativeElement = this._elementRef.nativeElement;\n    const nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n}\n","\nimport { NgModule } from '@angular/core';\n\nimport { NtInputDirective } from './input.directive';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [NtInputDirective],\n  declarations: [NtInputDirective]\n})\nexport class NtInputModule { }\n"],"names":[],"mappings":"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"}